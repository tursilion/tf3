* Thunder Force III Tribute music player
* 
* I first saw Thunder Force III back in 1987 or 1988, and have been hooked on it since.
* It's the reason I got a Sega Genesis, and I've always wanted my TI to do anything
* even remotely close. A major part of my vgmcomp2 music converter was wanting to
* be able to convert Genesis music, specifically for this sound track. So now, though
* I don't intend to do the whole game, I've used my conversion toolchains to do
* this little musical and graphical tribute.
* 
* There's a little over 64k of compressed music, and more than that in graphics, so
* there's a lot of bank switching. Each song fits in a single bank guaranteed, so
* that helps a lot. 
*
* I'm torn on making it run without needing the 32k memory expansion or not, since the
* actual RAM usage would work in the scratchpad, but I worry about the CPU usage of the
* player when every byte accessed actually takes a write and a read. All the paging would
* be painful and I've already spent too long on this.
*
* Soooo... this program is going to be executing from 32K RAM and a separate loader cart
* will exist.

* bank definitions
loader equ >6000
ea5pt1 equ >6002
ea5pt2 equ >6004
ea5pt3 equ >6006
tf3ti00 equ >6008
tf3ti01 equ >600a
tf3ti02 equ >600c
tf3ti03 equ >600e
tf3ti04 equ >6010
tf3ti05 equ >6012
tf3ti06 equ >6014
tf3ti07 equ >6016
tf3ti08 equ >6018
tf3ti09 equ >601a
tf3ti10 equ >601c
tf3ti11 equ >601e
tf3ti12 equ >6038
tf3ti13 equ >603a
tf3ti14 equ >603c
mapbossunknown equ >6020
mapbosscerberus equ >6022
mapbossfish equ >6024
mapbossfort equ >6026
mapbossgargoyle equ >6028
mapbosslobster equ >602a
mapbossvulcan equ >602c
mapbriefing equ >602e
mapbriefingornbase equ >6030
maptitlethird1 equ >6032
maptitlethird2 equ >6034
maptitlethird3 equ >6036

** WARNING: Do not use R8 and R9 - they containthe VDP write addresses, and R15 has the song bank

* memory allocation only, don't put initialized data here! It won't get loaded anyway!
* low ram for data buffers
	AORG >2000
	
* Music player	
strDat
	bss 72
songVol
	bss 4
songNote
	bss 8
workBuf
	bss 2
retSave
    bss 2
    
* tf3 stuff
SCRNBUF	BSS 11*32		* buffer used for mixing characters on the title page
OLDKEY bss 2			* remember last key pressed

* briefing screen
crosshairrow bss 2		* current row of the crosshair in 8.8 fixed point
crosshaircol bss 2		* current column of the crosshair in 8.8 fixed point
crosshairspr bss 2		* row speed of the crosshair in 8.8
crosshairspc bss 2		* column speed of the crosshair in 8.8
crosshairtar bss 2		* crosshair target row
crosshairtac bss 2		* crosshair target column
weapon bss 2			* current weapon (0 or 1)
textline bss 2			* current line being printed in display
textptr bss 2			* pointer to next output char
textvdp bss 2			* VDP address of next output char
textcount bss 2			* number of characters left to print
textdelay bss 2			* delay frames left before next character
statusline bss 2		* index of status line for AID (0 = song title)
nextsong bss 2			* page of next song for tunes with two parts, 0 if none
nextsongidx bss 2		* index for the next song

* high RAM for program
	AORG >A000
	DEF START
	
	B @START

	COPY "tiSNonly.asm"

* data
BIT01  DATA >0001
QUITK  DATA >1100				* CRU value for QUIT
CHK32  DATA >FFE0				* inverse of >1f for clip checks

*****************

* random data for displaying III
* generated in BLASSIC, 26 entries of y*32+x+1
TITIII
	DATA 70,66,99,101,2,34,98,5,102,3,37,35,65,97,36,69,38,68,4,1,100,6,33,67
	DATA 0

*****************
* stage names are preceded by sprite coordinates (row,col) assuming just the world grid
* then always 6 characters of text
* For the sprite crosshairs, left is always the exact pixel, but specify right as
* desired minus 31, it's at the bottom of the mag 4 sprite
STAGESEL
	TEXT 'STAGE SELECT'
STAGETXT
	data txthydra,txtgorgon,txtseiren,txthaides,txtellis
txthydra
	data 6,94
	text 'HYDRA '
txtgorgon
	data 57,166
	text 'GORGON'
txtseiren
	data 106,166
	text 'SEIREN'
txthaides
	data 106,103
	text 'HAIDES'
txtellis
	data 69,83
	text 'ELLIS '
	even

*****************
* text lines
txtstage 
	data 5
	TEXT 'STAGE'
	even
txttarget 
	data 6
	TEXT 'TARGET'
	even
txtduration 
	data 8
	TEXT 'DURATION'
	even
	
TEXTFCTNS	DATA txtfctn1,txtfctn2,txtfctn3,txtfctn4
			DATA txtfctn5,txtfctn6,0
	
STATUSTEXT	DATA 0,STAT1,STAT2,STAT3,STAT4,STAT5
STAT1	
	data 21
	text 'MUSIC PLAYER BY TURSI'
	even
STAT2	
	data 19
	TEXT 'TFIII BY TECHNOSOFT'
	even
STAT3	
	data 15
	TEXT 'N FOR NEXT SONG'
	even
STAT4	
	data 19
	TEXT 'P FOR PREVIOUS SONG'
	even
STAT5	
	data 12
	TEXT 'QUIT TO EXIT'
	even

*****************
* Song information for the status screen
* 0 - status line, 1 - stage, 2 - Target, 3 - Duration, 4 - song 1 AND 2, crosshair row, crosshair col,portrait
* Song data is page, then index
SONGINFO
	DATA 0,TITLEINFO,SELECTINFO,HYDRAINFO,HBOSSINFO
	DATA GORGONINFO,GBOSSINFO,SEIRENINFO,SBOSSINFO
	DATA HAIDESINFO,HABOSSINFO,ELLISINFO,EBOSSINFO
	DATA CERBERUSINFO,BASEINFO,BASEBOSSINFO,COREINFO
	DATA ORNBOSSINFO,STAGECLEARINFO,CONTINUEINFO,ENDINGINFO
	DATA STAFFINFO,GAMEOVERINFO,SQUADINFO,TF4STAFFINFO,0
	
TITLEINFO	
	DATA T01,T02,T03,T04,S01,>2f00,>1800,mapbossunknown
t01	data 26
	TEXT 'THE WIND BLEW ALL DAY LONG'
	even
t02	data 5
	text 'title'
	even
t03	data 3
	text 'tf3'
	even
t04	data 4
	text '0m15'
	even
s01	data tf3ti00,0,0,0
	
selectinfo
	data t11,t12,t13,t14,s11,>2f00,>1800,mapbossunknown
t11	data 16
	TEXT 'BEYOND THE PEACE'
	even
t12	data 12
	text 'stage select'
	even
t13	data 6
	text 'choose'
	even
t14	data 4
	text '1m01'
	even
s11	data tf3ti01,0,0,0

hydrainfo
	data t21,t22,t23,t24,s21,>1600,>1e00,mapbossgargoyle
t21	data 16
	TEXT 'BACK TO THE FIRE'
	even
t22	data 5
	text 'hydra'
	even
t23	data 8
	text 'gargoyle'
	even
t24	data 4
	text '2m15'
	even
s21	data tf3ti02,0,0,0

hbossinfo
	data t31,t32,t33,t34,s31,>1600,>1e00,mapbossgargoyle
t31	data 8
	TEXT 'GARGOYLE'
	even
t32	data 5
	text 'hydra'
	even
t33	data 8
	text 'gargoyle'
	even
t34	data 4
	text '1m38'
	even
s31	data tf3ti03,0,0,0

gorgoninfo
	data t41,t42,t43,t44,s41,>4900,>6600,mapbossvulcan
t41	data 10
	TEXT 'VENUS FIRE'
	even
t42	data 6
	text 'gorgon'
	even
t43	data 11
	text 'twin vulcan'
	even
t44	data 4
	text '2m54'
	even
s41	data tf3ti00,5,0,0

gbossinfo
	data t51,t52,t53,t54,s51,>4900,>6600,mapbossvulcan
t51	data 11
	TEXT 'TWIN VULCAN'
	even
t52	data 6
	text 'gorgon'
	even
t53	data 11
	text 'twin vulcan'
	even
t54	data 4
	text '1m11'
	even
s51	data tf3ti03,1,0,0

seireninfo
	data t61,t62,t63,t64,s61,>7a00,>6600,mapbossfish
t61	data 20
	TEXT 'THE GRUBBY DARK BLUE'
	even
t62	data 6
	text 'seiren'
	even
t63	data 9
	text 'king fish'
	even
t64	data 4
	text '2m32'
	even
s61	data tf3ti04,0,0,0

sbossinfo
	data t71,t72,t73,t74,s71,>7a00,>6600,mapbossfish
t71	data 9
	TEXT 'KING FISH'
	even
t72	data 6
	text 'seiren'
	even
t73	data 9
	text 'king fish'
	even
t74	data 4
	text '1m30'
	even
s71	data tf3ti05,0,0,0

haidesinfo
	data t81,t82,t83,t84,s81,>7a00,>2700,mapbosslobster
t81	data 5
	TEXT 'TRUTH'
	even
t82	data 6
	text 'haides'
	even
t83	data 9
	text 'g lobster'
	even
t84	data 4
	text '1m43'
	even
s81	data tf3ti06,0,0,0

habossinfo
	data t91,t92,t93,t94,s91,>7a00,>2700,mapbosslobster
t91	data 9
	TEXT 'G LOBSTER'
	even
t92	data 6
	text 'haides'
	even
t93	data 9
	text 'g lobster'
	even
t94	data 4
	text '1m39'
	even
s91	data tf3ti02,1,0,0

ellisinfo
	data t101,t102,t103,t104,s101,>5500,>1300,mapbossfort
t101	data 19
	TEXT 'FINAL TAKE A CHANCE'
	even
t102	data 5
	text 'ellis'
	even
t103	data 11
	text 'mobile fort'
	even
t104	data 4
	text '1m41'
	even
s101	data tf3ti04,1,0,0

ebossinfo
	data t111,t112,t113,t114,s111,>5500,>1300,mapbossfort
t111	data 11
	TEXT 'MOBILE FORT'
	even
t112	data 5
	text 'ellis'
	even
t113	data 11
	text 'mobile fort'
	even
t114	data 4
	text '1m03'
	even
s111	data tf3ti01,2,0,0

cerberusinfo
	data t121,t122,t123,t124,s121,>3600,>3300,mapbosscerberus
t121	data 31
	TEXT 'HIS BEHAVIOUR INSPIRED DISTRUST'
	even
t122	data 8
	text 'cerberus'
	even
t123	data 8
	text 'cerberus'
	even
t124	data 4
	text '5m16'
	even
s121	data tf3ti05,1,tf3ti07,0

baseinfo
	data t131,t132,t133,t134,s131,>4000,>3800,mapbossunknown
t131	data 26
	TEXT 'HUNGER MADE THEM DESPERATE'
	even
t132	data 8
	text 'orn base'
	even
t133	data 7
	text 'no data'
	even
t134	data 4
	text '3m51'
	even
s131	data tf3ti08,0,0,0

basebossinfo
	data t141,t142,t143,t144,s141,>4000,>3800,mapbossunknown
t141	data 8
	TEXT 'OFF LUCK'
	even
t142	data 8
	text 'orn base'
	even
t143	data 7
	text 'no data'
	even
t144	data 4
	text '1m38'
	even
s141	data tf3ti09,0,0,0

coreinfo
	data t151,t152,t153,t154,s151,>4900,>3f00,mapbossunknown
t151	data 12
	TEXT 'FINAL MOMENT'
	even
t152	data 8
	text 'orn core'
	even
t153	data 6
	text 'cha os'
	even
t154	data 4
	text '1m23'
	even
s151	data tf3ti03,2,0,0

ornbossinfo
	data t161,t162,t163,t164,s161,>4900,>3f00,mapbossunknown
t161	data 17
	TEXT 'BE MENACED BY ORN'
	even
t162	data 6
	text 'cha os'
	even
t163	data 6
	text 'cha os'
	even
t164	data 4
	text '1m49'
	even
s161	data tf3ti00,1,tf3ti10,0

stageclearinfo
	data t171,t172,t173,t174,s171,>4900,>3f00,mapbossunknown
t171	data 11
	TEXT 'STAGE CLEAR'
	even
t172	data 5
	text 'clear'
	even
t173	data 9
	text 'destroyed'
	even
t174	data 4
	text '0m02'
	even
s171	data tf3ti00,2,0,0

continueinfo
	data t181,t182,t183,t184,s181,>4900,>3f00,mapbossunknown
t181	data 8
	TEXT 'CONTINUE'
	even
t182	data 8
	text 'continue'
	even
t183	data 4
	text 'none'
	even
t184	data 4
	text '0m21'
	even
s181	data tf3ti00,4,0,0

endinginfo
	data t191,t192,t193,t194,s191,>4900,>3f00,mapbossunknown
t191	data 21
	TEXT 'A WAR WITHOUT THE END'
	even
t192	data 9
	text 'all clear'
	even
t193	data 4
	text 'none'
	even
t194	data 4
	text '1m04'
	even
s191	data tf3ti01,1,0,0

staffinfo
	data t201,t202,t203,t204,s201,>4900,>3f00,mapbossunknown
t201	data 7
	TEXT 'PRESENT'
	even
t202	data 9
	text 'all clear'
	even
t203	data 10
	text 'cool staff'
	even
t204	data 4
	text '3m07'
	even
s201	data tf3ti11,0,0,0

gameoverinfo
	data t211,t212,t213,t214,s211,>4900,>3f00,mapbossunknown
t211	data 9
	TEXT 'GAME OVER'
	even
t212	data 7
	text 'no more'
	even
t213	data 4
	text 'none'
	even
t214	data 4
	text '0m04'
	even
s211	data tf3ti00,3,0,0

squadinfo
	data t221,t222,t223,t224,s221,>2500,>6b00,mapbossunknown
t221	data 11
	TEXT 'METAL SQUAD'
	even
t222	data 9
	text 'tfiv wall'
	even
t223	data 9
	text 'evil core'
	even
t224	data 4
	text '4m40'
	even
s221	data tf3ti12,0,tf3ti13,0

tf4staffinfo
	data t231,t232,t233,t234,s231,>2500,>6b00,mapbossunknown
t231	data 23
	TEXT 'STAND UP AGAINST MYSELF'
	even
t232	data 10
	text 'tfiv staff'
	even
t233	data 10
	text 'cool staff'
	even
t234	data 4
	text '1m49'
	even
s231	data tf3ti14,0,0,0

*****************
* Keyboard
* No input, return on R1 LSB (FF = no key)
* Warning: no debounce - that may be a problem on real hardware
KSCAN	CLR R0
KEYLP1	LI R12,>0024		* column select
		LDCR R0,3
		LI R12,>0006		* row select
		CLR R1				* so that the other byte will be zeroed
		STCR R1,8			* pressed keys are '0' bits
		CLR R2
		SWPB R1
KSHIFT	SRL R1,1
		JNC KFND
		INC R2
		JMP KSHIFT
KFND	CI R2,8				* check for overflow (no key)
		JL GOTKEY
		AI R0,>0100			* next column
		CI R0,>0600
		JNE KEYLP1
		LI R1,>00FF			* no key
		B *R11
GOTKEY	SWPB R0
		SLA R0,3
		A R2,R0
		ai r0,KEYMAP
		MOVB *R0,R1			* ASCII code
		SRL R1,8			* shift and clear MSB
		B *R11

* By columns, then rows. 8 Rows per column. No shift states
KEYMAP	BYTE 61,32,13,255,1,2,3,255
		TEXT '.LO92SWX'
		TEXT ',KI83DEC'
		TEXT 'MJU74FRV'
		TEXT 'NHY65GTB'
		TEXT '/;P01AQZ'
		EVEN

* Mute audio
MUTE
	li r0,>9FBF
	movb r0,@>8400
	swpb r0
	movb r0,@>8400
	li r0,>DFFF
	movb r0,@>8400
	swpb r0
	movb r0,@>8400
	b *r11

*****************
**	
* VDP access
*
* Raw versions assume address is preswapped and pre-masked,
* and do not attempt to preserve the value in R0
*

**
* VSBR - Read single byte at R0 into MSB R1
VSBR	
	SWPB R0
VSBRRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9			* set address
	MOVB @>8800,R1		* read byte
	B *R11

**
* VMBR - Read R2 bytes from VDP R0 to CPU R1
* Destroys R1,R2
VMBR
	SWPB R0
VMBRRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9			* set address
	COC @BIT01,R2		* check if odd
	JNE VMBRLP			* jump if not
	MOVB @>8800,*R1+	* read one byte
	DEC R2				* count down
	JEQ VMBREX			* jump ahead to exit if zero
VMBRLP
	MOVB @>8800,*R1+	* read two bytes
	MOVB @>8800,*R1+
	DECT R2				* count down by two
	JNE VMBRLP			* loop till finished
VMBREX
	B *R11				* return
	
**
* VSBW - Write single byte to R0 from MSB R1
* Destroys R0 (actually just oRs it)
VSBW
	ORI R0,>4000		* mask in write bit
	SWPB R0
VSBWRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9			* write address
	MOVB R1,*R8			* write data
	B *R11

**
* V2BW - Write two bytes to R0 from R1
* Destroys R0 (actually just oRs it)
V2BW
	ORI R0,>4000
	SWPB R0
V2BWRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9		* set address
	MOVB R1,*R8		* write data 1
	SWPB R1
	MOVB R1,*R8		* write data 2
	B *R11

**
* V2BR - Reads two bytes from R0 to R1
V2BR
	SWPB R0
V2BRRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9			* set address
	MOV R0,R0			* delay
	MOVB @>8800,R1		* read first byte
	SWPB R1
	MOVB @>8800,R1		* read second byte
	SWPB R1
	B *R11

**
* VMBW - Write R2 bytes from CPU R1 to VDP R0
* Destroys R0,R1,R2
* Copied to scratchpad - DO NOT MAKE LARGER
VMBW EQU >8340
VMBWSC
	ORI R0,>4000
	SWPB R0
VMBWRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9			* set address
	COC @BIT01,R2		* Check for odd length
	JNE VMBWLP			* jump to x2 loop if not odd
	MOVB *R1+,*R8		* copy one byte
	DEC R2				* count down
	JEQ VMBWEX			* jump to exit if done
VMBWLP
	MOVB *R1+,*R8		* write one byte
	MOVB *R1+,*R8		* write two bytes
	DECT R2				* count down
	JNE VMBWLP			* loop till finished
VMBWEX
	B *R11
vmbwend
	
**
* VMBS - Set R2 bytes from R1 MSB to VDP R0
* Destroys R0,R1,R2
VMBS
	ORI R0,>4000
	SWPB R0
VMBSRAW
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9			* set address
	COC @BIT01,R2		* Check for odd length
	JNE VMBSLP			* jump to x2 loop if not odd
	MOVB R1,*R8			* copy once
	DEC R2				* count down
	JEQ VMBSEX			* jump to exit if done
VMBSLP
	MOVB R1,*R8			* write byte
	MOVB R1,*R8			* write second byte
	DECT R2				* count down
	JNE VMBSLP			* loop till finished
VMBSEX
	B *R11

**
* VDPWA - Write address or register
VDPWA
	SWPB R0
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9		* write address
	B *R11  
	
**
* LOADRG - load regs list to VDP address, end on >0000 and 
* write >D0 (for sprites) (so second to last entry is write address for sprite table)
* address of table in R1 (destroyed)
LOADRG
LOADLP
	MOV *R1+,R0
	JEQ LDRDN
	SWPB R0
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9
	JMP LOADLP
LDRDN
	LI R1,>D000
	MOVB R1,*R8
	B *R11

***

* wait r4 jiffies - this one ALSO calls the sound player
* this one, you can safely set r4 to 0
* uses r0,r12
* ** BIG WARNING ** - this changes ROM bank to R15 for the music!
delay
* reset the bank in case of QUIT
	mov r0,@>6000
	
* This quit test copied from the console ROM
	LI R12,>0024 		* Load CRU
	LDCR @>0012,3
	SRC R12,7			* delay
	LI R12,>0006
	STCR R0,8 			* Fetch CRU
	CZC @QUITK,R0 		* QUIT key?
	JNE MENUKY
	BLWP @>0000			* reboot if yes
MENUKY
	clr r12				* test CRU VDP interface
	tb 2
	jeq delay
	movb @>8802,r12
	
	mov r15,*r15		* bank switch (or nothing if cleared)
	jeq noSong
	
	lwpi >8300
	bl @SongLoop		* play music
	lwpi >8320
noSong 

	dec r4
	jgt delay
	b *r11

* r3 - bitmap VDP offset for color and pattern
* r4 - page to read data (data comes from page header)
loadpagevdp
	mov r11,r10			* save return
	mov r4,*r4			* bank switch
	mov r3,r0			* address to write pattern
	mov @>6004,r1		* pattern table in ROM
	mov @>6000,r2		* number of bytes of chars
	bl @vmbw
	ai r0,>2000			* address to write color
	mov @>6002,r1		* color table in ROM
	mov @>6000,r2		* number of bytes
	bl @vmbw
	b *r10				* chars loaded
	

* draw the ship at any X overlaid on the background into a CPU buffer
* R0 - target CPU address
* R1 - source CPU address for background row (must be paged already)
* R2 - number of rows to copy
* R3 - X offset of the ship (assumed to start at >7005 and be 22 chars wide)
* uses R4,R5,R6
* All kinds of assumptions about the data layout made here
* This is now copied to scratchpad and used at >8362
shipdraw equ >8362
shipdrawsc
* first, fast copy of background data, so we can get away with fewer compares
	mov r0,r4
	mov r1,r5
	mov r2,r6
	sla r6,2			* make it groups of 8 instead of 32
sdl1
	mov *r5+,*r4+
	mov *r5+,*r4+
	mov *r5+,*r4+
	mov *r5+,*r4+
	dec r6
	jne sdl1			* warning - this is patched in scratchpad, don't change offset!
	
* now, we have to do a byte by byte copy of the ship, checking for zero
* the ship data IS 32 bytes wide, but we only need to check 22, so we'll fake the
* loop that way. We just adjust bytes to rows
	a r3,r0			* target
	ai r1,(32*8)+5	* we should start exactly one section down, plus 5 for the start of ship data
	
sdl2
	li r5,22		* bytes across
sdl4
	movb *r1+,r4	* what is the byte?
	jeq sdl3		* skip ahead if nul
	czc @chk32,r3
	jne sdl3		* check for column clip
	movb r4,*r0		* else copy it
sdl3
	inc r0			* update target either way
	inc r3			* and column for clip checks
	dec r5
	jne sdl4		* finish the row
	
	ai r0,10
	ai r1,10		* wrap around to start of next row
	ai r3,-22		* fix r3
	dec r2			* count down rows
	jne sdl2
	
	b *r11			* all done
shipend


* draw the title characters on the screen with row index r5
* r5 - row from 0-9
* Since we never need to REDRAW anything, we can just draw the one row
drawtit
	data drawtit0,drawtit1,drawtit2,drawtit3,drawtit4
	data drawtit5,drawtit6,drawtit7,drawtit8,drawtit9
	
drawtit0
	mov r11,r10
	
	mov r0,@maptitlethird1
	
	li r0,>1800+32+4
	mov @>6008,r1
	ai r1,(32*16)+32+4
	li r2,4
	bl @vmbw
	
	mov r0,@maptitlethird2
	
	li r0,>1800+(32*10)+8
	mov @>6008,r1
	ai r1,(32*16)+(2*32)+8
	li r2,1
	bl @vmbw
	
	li r0,>1800+(32*10)+11
	mov @>6008,r1
	ai r1,(32*16)+(2*32)+11
	li r2,1
	bl @vmbw

	li r0,>1800+(32*10)+16
	mov @>6008,r1
	ai r1,(32*16)+(2*32)+16
	li r2,4
	bl @vmbw

	b *r10
	
drawtit1
	mov r11,r10

	mov r0,@maptitlethird1
	
	li r0,>1800+(32*2)+6
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+6
	li r2,2
	bl @vmbw
	
	li r0,>1800+(32*2)+13
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+13
	li r2,3
	bl @vmbw
	
	li r0,>1800+(32*2)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+20
	li r2,4
	bl @vmbw

	mov r0,@maptitlethird2
	
	li r0,>1800+(32*9)+8
	mov @>6008,r1
	ai r1,(32*16)+32+8
	li r2,1
	bl @vmbw
	
	li r0,>1800+(32*9)+11
	mov @>6008,r1
	ai r1,(32*16)+32+11
	li r2,1
	bl @vmbw

	li r0,>1800+(32*9)+16
	mov @>6008,r1
	ai r1,(32*16)+32+16
	li r2,4
	bl @vmbw

	li r0,>1800+(32*9)+24
	mov @>6008,r1
	ai r1,(32*16)+32+24
	li r2,1
	bl @vmbw

	b *r10
	
drawtit2
	mov r11,r10
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*3)+6
	mov @>6008,r1
	ai r1,(32*16)+(32*3)+6
	li r2,2
	bl @vmbw

	li r0,>1800+(32*3)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*3)+12
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*3)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*3)+20
	li r2,4
	bl @vmbw

	mov r0,@maptitlethird2
	
	li r0,>1800+(32*8)+8
	mov @>6008,r1
	ai r1,(32*16)+8
	li r2,4
	bl @vmbw

	li r0,>1800+(32*8)+16
	mov @>6008,r1
	ai r1,(32*16)+16
	li r2,3
	bl @vmbw

	li r0,>1800+(32*8)+24
	mov @>6008,r1
	ai r1,(32*16)+24
	li r2,1
	bl @vmbw
	
	b *r10

drawtit3
	mov r11,r10
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*4)+6
	mov @>6008,r1
	ai r1,(32*16)+(32*4)+6
	li r2,2
	bl @vmbw

	li r0,>1800+(32*4)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*4)+12
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*4)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*4)+20
	li r2,4
	bl @vmbw
	
		
	li r0,>1800+(32*7)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*7)+8
	li r2,4
	bl @vmbw

	li r0,>1800+(32*7)+16
	mov @>6008,r1
	ai r1,(32*16)+(32*7)+16
	li r2,4
	bl @vmbw

	li r0,>1800+(32*7)+24
	mov @>6008,r1
	ai r1,(32*16)+(32*7)+24
	li r2,1
	bl @vmbw
	
	b *r10
	
drawtit4
	mov r11,r10
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*5)+6
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+6
	li r2,2
	bl @vmbw

	li r0,>1800+(32*5)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+12
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*5)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+20
	li r2,4
	bl @vmbw
	
	
	li r0,>1800+(32*6)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*6)+8
	li r2,4
	bl @vmbw

	b *r10
	
drawtit5
	mov r11,r10
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*6)+6
	mov @>6008,r1
	ai r1,(32*16)+(32*6)+6
	li r2,2
	bl @vmbw

	li r0,>1800+(32*6)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*6)+12
	li r2,1
	bl @vmbw
	
	
	li r0,>1800+(32*5)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+8
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*5)+16
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+16
	li r2,4
	bl @vmbw

	li r0,>1800+(32*5)+25
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+25
	li r2,1
	bl @vmbw

	li r0,>1800+(32*5)+27
	mov @>6008,r1
	ai r1,(32*16)+(32*5)+27
	li r2,1
	bl @vmbw

	b *r10
	
drawtit6
	mov r11,r10
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*7)+7
	mov @>6008,r1
	ai r1,(32*16)+(32*7)+7
	li r2,1
	bl @vmbw

	li r0,>1800+(32*7)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*7)+12
	li r2,4
	bl @vmbw

	li r0,>1800+(32*7)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*7)+20
	li r2,4
	bl @vmbw
	
	
	li r0,>1800+(32*4)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*4)+8
	li r2,4
	bl @vmbw

	li r0,>1800+(32*4)+16
	mov @>6008,r1
	ai r1,(32*16)+(32*4)+16
	li r2,4
	bl @vmbw

	li r0,>1800+(32*4)+24
	mov @>6008,r1
	ai r1,(32*16)+(32*4)+24
	li r2,4
	bl @vmbw
	
	b *r10

drawtit7
	mov r11,r10
	
	mov r0,@maptitlethird2
	
	li r0,>1800+(32*8)+7
	mov @>6008,r1
	ai r1,(32*16)+(32*0)+7
	li r2,1
	bl @vmbw

	li r0,>1800+(32*8)+13
	mov @>6008,r1
	ai r1,(32*16)+(32*0)+13
	li r2,3
	bl @vmbw

	li r0,>1800+(32*8)+21
	mov @>6008,r1
	ai r1,(32*16)+(32*0)+21
	li r2,3
	bl @vmbw
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*3)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*3)+8
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*3)+16
	mov @>6008,r1
	ai r1,(32*16)+(32*3)+16
	li r2,3
	bl @vmbw

	li r0,>1800+(32*3)+24
	mov @>6008,r1
	ai r1,(32*16)+(32*3)+24
	li r2,4
	bl @vmbw

	b *r10
	
drawtit8
	mov r11,r10
	
	mov r0,@maptitlethird2
	
	li r0,>1800+(32*9)+7
	mov @>6008,r1
	ai r1,(32*16)+(32*1)+7
	li r2,1
	bl @vmbw

	li r0,>1800+(32*9)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*1)+12
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*9)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*1)+20
	li r2,4
	bl @vmbw
	
	mov r0,@maptitlethird1
	
	li r0,>1800+(32*2)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+8
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*2)+16
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+16
	li r2,4
	bl @vmbw
	
	li r0,>1800+(32*2)+24
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+24
	li r2,4
	bl @vmbw
	
	b *r10
	
drawtit9
	mov r11,r10
	
	mov r0,@maptitlethird2
	
	li r0,>1800+(32*10)+7
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+7
	li r2,1
	bl @vmbw

	li r0,>1800+(32*10)+12
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+12
	li r2,4
	bl @vmbw

	li r0,>1800+(32*10)+20
	mov @>6008,r1
	ai r1,(32*16)+(32*2)+20
	li r2,4
	bl @vmbw

	mov r0,@maptitlethird1
	
	li r0,>1800+(32*1)+8
	mov @>6008,r1
	ai r1,(32*16)+(32*1)+8
	li r2,2
	bl @vmbw
	
	b *r10
	
* translation to convert ascii to the silly places I put text...
* 0 is at 26, A (blue) is at 43, a (yellow) is at 77
* delta is -22 for numbers and uppercase, -20 for lowercase
* we take no responsibility for non-alphanumerics.
* R0 - VDP address
* R1 - CPU address
* R2 - bytes to copy
showtext
	ori r0,>4000		* set address for write
	swpb r0
	movb r0,*r9
	swpb r0
	movb r0,*r9
	
	clr r0
stlp
	movb *r1+,r0
	ci r0,>2000			* space
	jne stlp3
	clr r0
	jmp stlp2
stlp3
	ai r0,>EA00			* -22
	ci r0,>4b00			* lowercase A after subtraction
	jlt stlp2
	ai r0,>0200			* give the 2 back
stlp2
	movb r0,*r8
	dec r2
	jne stlp
	
	b *r11
	
* place crosshair sprites
* R6 - row (screen coordinates)
* r7 - column (screen coordinates)
* r13 - row offset for top
* r14 - column offset for left
drawcrosshairs
	li r0,>5b00
	SWPB R0
	MOVB R0,*R9
	SWPB R0
	MOVB R0,*R9		* write address
	
	li r1,>7400		* vertical beam (4 of these)
	li r2,>0800		* dark red

	mov r13,r0		* first row
	swpb r0
	swpb r7
	movb r0,*r8		* row
	movb r7,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	ai r0,>2000
	movb r0,*r8		* row
	movb r7,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	ai r0,>2000
	movb r0,*r8		* row
	movb r7,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	ai r0,>2000
	movb r0,*r8		* row
	movb r7,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	swpb r7

	li r1,>7800		* horizontal beam (3 of these)
	mov r14,r0		* first column
	swpb r0
	swpb r6
	movb r6,*r8		* row
	movb r0,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	ai r0,>2000
	movb r6,*r8		* row
	movb r0,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	ai r0,>2000
	movb r6,*r8		* row
	movb r0,*r8		* col
	movb r1,*r8		* char
	movb r2,*r8		* color
	swpb r6
	
	b *r11
	
	
*************
* new music on briefing screen
* r5 - index (x2) into music table
newmusic
	mov r11,r10

* load new crosshair target
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song
	
	mov @10(r1),@crosshairtar		* crosshair row
	mov @12(r1),@crosshairtac		* crosshair column

* calculate new crosshair movement speeds - we want to get there in 3 seconds or so
* we can just divide, with fixed point we should get there... hopefully ;)
* the problem is, div is unsigned, so we need to make sure it's positive and fix sign later
	li r0,180						* three seconds
	clr r1							* msw of row
	mov @crosshairtar,r2			* target row
	s @crosshairrow,r2				* current row
	jgt nm1
* negative version	
	neg r2							* make it positive
	div r0,r1						* divide r0 into r1, result in r1, remainder in r2
	neg r1							* make it negative
	jmp nm2
nm1
* positive version
	div r0,r1
nm2
	mov r1,@crosshairspr			* row speed

	clr r1							* msw of col
	mov @crosshairtac,r2			* target col
	s @crosshaircol,r2				* current col
	jgt nm3
* negative version	
	neg r2							* make it positive
	div r0,r1						* divide r0 into r1, result in r1, remainder in r2
	neg r1							* make it negative
	jmp nm4
nm3
* positive version
	div r0,r1
nm4
	mov r1,@crosshairspc			* column speed

* clear text box
	li r0,>5800+(5*32)+17
	li r3,8
nm5
	clr r1
	li r2,14
	bl @vmbs
	ai r0,32
	dec r3
	jne nm5
	
* load pointers to text information
	clr @statusline					* reset back to song name
	clr @textline					* first line of text
	li r0,txtstage					* current character
	mov *r0+,@textcount				* characters left in line
	mov r0,@textptr					* address of next character
	li r0,1
	mov r0,@textdelay				* 1 frame to appear
	li r0,>5800+(6*32)+17			* VDP address
	mov r0,@textvdp

* load new portrait - this one is a bit tricky as we have one row in group 2, and the rest in group 3
* fortunately, the top row always counts up sequentially from 1 (we are relying on that), so we can
* just copy the first 16 characters blindly in at char 240, and remap that first row
* we're going to redraw the whole thing, so no need to clear it first
* we didn't save R1, so look it up again
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song

	mov @14(r1),r0					* page for the portrait
	mov r0,*r0						* map it in
	
* just copy 16 characters blindly to character 240
	li r0,>0F80						* pattern
	mov @>6004,r1
	li r2,128
	bl @vmbw
	
	li r0,>2F80						* color
	mov @>6002,r1
	li r2,128
	bl @vmbw

* now load the 16 characters to the grid - adding 240 as we go and ignoring 0 (becomes >09)
	li r0,>5800+(15*32)+17
	mov @>6008,r1					* address of map data
	bl @vdpwa
	li r2,14						* 14 columns
nm6
	movb *r1+,r4					* get byte
	jeq nm7							* if zero
	ai r4,>f000						* add 240
	jmp nm8
nm7
	li r4,>0900						* background char
nm8
	movb r4,*r8						* write to VDP
	dec r2
	jne nm6

* then we can load the whole bit for group 3 at character 77 (this kills yellow text, which we don't use)
* pretty much the same loop here, but we add 77 and it's 6 rows long
	li r0,>1268						* pattern
	mov @>6004,r1
	mov @>6000,r2					* all the bytes
	bl @vmbw
	
	li r0,>3268						* color
	mov @>6002,r1
	mov @>6000,r2					* all the bytes
	bl @vmbw

* now load the characters to the grid - adding 77 as we go and ignoring 0 (becomes >09)
	li r3,6							* 6 rows
	li r0,>1800+(16*32)+16
	mov @>6008,r1					* address of map data
	ai r1,14						* skip the first row
	
nm9
	bl @vdpwa
	li r2,14						* 14 columns
nm10
	movb *r1+,r4					* get byte
	jeq nm11						* if zero
	ai r4,>4D00						* add 77
	jmp nm12
nm11
	li r4,>0900						* background char
nm12
	movb r4,*r8						* write to VDP
	dec r2
	jne nm10
	
	ai r0,32						* next row
	dec r3
	jne nm9

* load new song and start playing
* we didn't save R1, so look it up again
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song
	mov @8(r1),r1					* address of song data
	mov *r1+,r15					* save the song bank
	mov *r1+,r2						* song index
	mov *r1+,@nextsong				* next song, if any
	mov *r1,@nextsongidx			* and save its index too
	
	mov r0,*r15						* bank in the song
	li r1,>6000
	swpb r2
	bl @StartSong					* r2 was already loaded above

	b *r10

********************* MAIN CODE HERE **********************

START
* load workspace, R8 and R9, then we can start
	lwpi >8320
	li r8,>8c00
	li r9,>8c02

* turn VDP back off again (assumes that loader already set up bitmap)
* turn on with >81E3
	li r0,>81A3
	bl @VDPWA

* init the music player by calling StopSong
	clr r15					* r15 will hold the song bank
	bl @StopSong

* now copy vmbw into scratchpad ram for better blit speed
	li r0,vmbw
	li r1,vmbwsc
vcplp
	mov *r1+,*r0+
	ci r1,vmbwend
	jne vcplp
	
* clear the screen again
	li r0,>1800
	clr r1
	li r2,>300
	bl @VMBS
	
* first, we need to load up the title page. There are three banks involved
	clr r3					* pattern offset
	li r4,maptitlethird1	* page
	bl @loadpagevdp
	li r0,>1800				* SIT address
	mov @>6008,r1			* ROM address
	li r2,256				* 1/3rd of background screen
	bl @vmbw
	
	ai r3,>0800
	li r4,maptitlethird2	* page
	bl @loadpagevdp
	li r0,>1900				* SIT address
	mov @>6008,r1			* ROM address
	li r2,256				* 1/3rd of background screen
	bl @vmbw
	
	ai r3,>0800
	li r4,maptitlethird3	* page
	bl @loadpagevdp
	li r0,>1A00				* SIT address
	mov @>6008,r1			* ROM address
	li r2,256				* 1/3rd of background screen
	bl @vmbw
	
* finally, copy shipdraw to scratchpad to squeeze a little more speed out of it (helps)
	li r0,shipdrawsc
	li r1,shipdraw
sclp
	mov *r0+,*r1+
	ci r0,shipend
	jne sclp
	
* initialize the title music
	li r15,tf3ti00
	mov r15,*r15
	li r1,>6000
	clr r2
	bl @StartSong
	
* that's good, now we can turn on the screen and start the music
	li r0,>81E3
	bl @VDPWA
	
	
*********************************************
		b @startss
*********************************************
		
	
	
	
* first, a brief pause before the ship appears
	li r4,60
	bl @delay
	
* now we are going to flicker the ship in from left to right until it is centered
* the ship starts at row 12 and is 11 rows high
* rows 12-15 are in group 2, and 16-22 are in group 3 (different banks)
* it is 22 characters wide with 5 cells of gap on each side
* we also have to not draw 0-filled cells and clip at the edges
*
* We'll double buffer it to reduce the odds of unintended flicker, hopefully the
* work and blit will be quick enough - SCRNBUF is 11*32 bytes
*
shspeed equ 3

	li r13,-21					* x coordinate (for left side)
	li r14,shspeed				* frames to count
	
* draw the ship flickering at x=r13, then x=10-r13
shiplp
* first the left version, group 2 (last 4 rows)
	mov r0,@maptitlethird2		* bank it in
	li r0,SCRNBUF				* target address
	mov @>6008,r1				* map data for group 2 (first group is bg, last group is ship)
	ai r1,32*4					* skip to row 4 (which is really row 12, cause group 2)
	li r2,4						* copy 4 rows
	mov r13,r3					* ship offset
	bl @shipdraw				* call shipdraw
	li r0,>1900+(4*32)			* second third VDP
	li r1,SCRNBUF				* buffer we just made
	li r2,32*4					* 4 rows
	bl @vmbw					* get thee to VDP

* then group 3, 7 rows
	mov r0,@maptitlethird3		* bank it in
	li r0,SCRNBUF				* target address
	mov @>6008,r1				* map data for group 2 (first group is bg, last group is ship)
	li r2,7						* copy 7 rows
	mov r13,r3					* ship offset
	bl @shipdraw				* call shipdraw
	li r0,>1A00					* third third VDP
	li r1,SCRNBUF				* buffer we just made
	li r2,32*7					* 7 rows
	bl @vmbw					* get thee to VDP
	
	clr r4
	bl @delay					* frame delay
	ci r13,5					* silly to do this every time, but easy to get the last frame drawn ;)
	jeq shipdn
	
* now we need to do the same thing, but on the RIGHT side. We can skip the check for r13 though
* group 2 (last 4 rows)
	mov r0,@maptitlethird2		* bank it in
	li r0,SCRNBUF				* target address
	mov @>6008,r1				* map data for group 2 (first group is bg, last group is ship)
	ai r1,32*4					* skip to row 4 (which is really row 12, cause group 2)
	li r2,4						* copy 4 rows
	li r3,10					* ship far right
	s r13,r3					* ship offset
	bl @shipdraw				* call shipdraw
	li r0,>1900+(4*32)			* second third VDP
	li r1,SCRNBUF				* buffer we just made
	li r2,32*4					* 4 rows
	bl @vmbw					* get thee to VDP

* then group 3, 7 rows
	mov r0,@maptitlethird3		* bank it in
	li r0,SCRNBUF				* target address
	mov @>6008,r1				* map data for group 2 (first group is bg, last group is ship)
	li r2,7						* copy 7 rows
	li r3,10					* ship far right
	s r13,r3					* ship offset
	bl @shipdraw				* call shipdraw
	li r0,>1A00					* third third VDP
	li r1,SCRNBUF				* buffer we just made
	li r2,32*7					* 7 rows
	bl @vmbw					* get thee to VDP
	
	clr r4
	bl @delay					* frame delay

* count down and move if needed
	dec r14						* count down here
	jne shiplp
	
	li r14,shspeed				* reload it
	inc r13						* next step
	jmp shiplp					* and draw it either way (escape is right after the first delay)
shipdn

* there's about a half second delay here...
	li r4,40
	bl @delay

* now it's time for the title text. I'm thinking too hard about how to do it "right"
* so I'm going to do it completely manually ;) Takes more code, but we should have room to spare.

	clr r13						* frame counter
titlp
	mov @drawtit(r13),r1		* fetch function address
	bl *r1						* draw the relevant bits
	
	li r4,5
	bl @delay
	
	inct r13
	ci r13,20
	jne titlp

* all that's left now is the III blocking in. This lives from rows 11-14, columns 13-18
	li r13,TITIII				* random number table
	
tit3lp
	mov r0,@maptitlethird2		* bank in the second third

	mov *r13+,r1				* get random offset (+1)
	jeq tit3end					* if we're done, exit
	mov r1,r0					* save for VDP offset
	a @>6008,r1					* add md0 for ROM offset
	ai r1,(32*16)+(3*32)+12		* and get down to the title block, plus offset
	ai r0,>5800+(11*32)+12		* VDP write address
	bl @vdpwa					* set VDP address
	movb *r1,*r8				* write byte to VDP
	
	li r4,2
	bl @delay
	jmp tit3lp
tit3end

* now, we just wait for the music to end!
waitlp
	clr r4
	bl @delay
	
	movb @songNote+7,r0
	andi r0,>0100
	jne waitlp
	
* good, now we pause for a second...
	li r4,60
	bl @delay
	
* clear the screen, and wait for another half second
startss
	li r0,>1800
	clr r1
	li r2,768
	bl @vmbs
	
	li r4,30
	bl @delay
	
* next screen! Time for the stage select!
* load the character set (all three pages this one, at least to start)
	clr r3
	li r4,mapbriefing
	bl @loadpagevdp
	li r3,>800
	li r4,mapbriefing
	bl @loadpagevdp
	li r3,>1000
	li r4,mapbriefing
	bl @loadpagevdp
	
* and load the sprite graphics - no nicely defined pointer this time
	li r0,>1b80			* first free pattern
	mov @>6008,r1		* md0
	ai r1,-(16*8+10)		* distance back to start of sprite data
	li r2,16*8
	bl @vmbw
	
* and block out the sprite table
	li r0,>1b00
	li r1,>d000
	li r2,128
	bl @vmbs

* but, we aren't loading the briefing PAGE, just the world map
* which means we need to do it manually. The world map is at
* row 5, column 1, and is 14 cells wide and 17 cells tall

* display STAGE SELECT text in top row 
* but... nooooo, I couldn't put the alphabet at the ASCII location...
	li r0,>1800+10
	li r1,STAGESEL
	li r2,12
	bl @showtext
	
* no paging issues on this one, just bring it in, one row at a time
	li r4,>1800+(32*3)+9		* dest adr
	mov @>6008,r5				* address of MD0 (page still valid from above)
	ai r5,(5*32)+1				* location in the source map
	li r6,17					* number of rows
cpmapl1
	mov r4,r0
	mov r5,r1
	li r2,14
	bl @vmbw
	
	ai r4,32
	ai r5,32
	dec r6
	jne cpmapl1
	
* okay, static text is up, initialize our world and the music
	clr r5						* world (make sure to step by 2!)
	li r13,27					* row offset for sprite (to make the edges line up, NOT the center!)
	li r14,80					* col offset for sprite (to make the edges line up, NOT the center!)
	
	li r15,tf3ti01
	mov r0,*r15					* page it in
	li r1,>6000
	clr r2						* song 0 is select
	bl @StartSong
	
* now wait for the music to end. as a bonus, the human can select
* a stage with the arrow keys and space, which will change where we start
* the briefing screen

selectlp
* first, draw the crosshairs and world text
* we don't have to do much, so we can do this every frame
	clr r4
	bl @delay					* music and frame
	movb @songNote+7,r0			* check if music is stopped
	andi r0,>0100
	jeq selectover
	
selectnotover
	mov r5,r4					* make a copy
	mov @STAGETXT(r4),r4		* get the pointer
	
	mov *r4+,r6					* this is the row
	mov *r4+,r7					* column
	bl @drawcrosshairs
	
	li r0,>1800+(23*32)+13		* for writing the world name
	mov r4,r1
	li r2,6
	bl @showtext
	
	bl @kscan					* look for new keypress
	c r1,@oldkey
	jeq selectlp
	
	mov r1,@oldkey				* save it

* we're looking for S, D and Enter
	ci r1,>0053					* S
	jne NOTS
	
	inct r5
	ci r5,10
	jne nots2
	clr r5
nots2
	jmp selectlp
	
NOTS
	ci r1,>0044					* D
	jne NOTD
	
	dect r5
	ci r5,>fffe
	jne notd2
	li r5,8
notd2
	jmp selectlp
	
NOTD
	ci r1,>000D
	jne selectlp
	bl @StopSong
	bl @mute
	jmp selectlp
	
selectover

* Finally, we get to the meat of the player - the mission briefing screen
* there's a fair bit going on here

	clr r4
	bl @delay		* align with end of frame

* clear the sprites (temporarily)
	li r0,>1b00
	li r1,>d000
	li r2,128
	bl @vmbs
	
* and clear the screen...
	li r0,>1800
	clr r1
	li r2,768
	bl @vmbs
	
* graphics and sprites are already loaded, so we just need to bring up the mission screen
* as nice as it'd be to stay in registers, for simplicity we're going to track all this stuff as data
	mov r0,@mapbriefing		* page it in (probably already is)
	
	li r0,>1800
	mov @>6008,r1			* for once, we want the whole thing!
	li r2,768
	bl @vmbw
	
	li r6,>1000
	li r7,>1000				* current row and col for crosshairs - they move now (0,0 isn't legal)
	mov r6,@crosshairrow
	mov r7,@crosshaircol

	clr @weapon				* zero or 1 only
	
	clr @textline
	clr @textptr
	clr @textcount
	clr @textdelay			* data for displaying text in box
	
	clr @statusline			* index for the status line (changed by AID)
	
* load up the sprites for the weapon select and targeting (I might delete targeting)
	li r0,>5b1c
	bl @vdpwa
	li r0,>0778
	movb r0,*r8
	swpb r0
	movb r0,*r8
	li r0,>700F
	movb r0,*r8
	swpb r0
	movb r0,*r8
	
	li r0,>84b0
	movb r0,*r8
	swpb r0
	movb r0,*r8
	li r0,>7C07
	movb r0,*r8
	swpb r0
	movb r0,*r8
	
	ai r5,6					* finally, add 6 to the selected music, to skip null, title and stage select
	bl @newmusic

* and finally, here's the main loop	
mainloop
	clr r4
	bl @delay				* handle music and quit

* move crosshairs and draw them
	a @crosshairspr,@crosshairrow
	a @crosshairspc,@crosshaircol
	cb @crosshairrow,@crosshairtar
	jne mlp1
	clr @crosshairspr		* row target reached
mlp1
	cb @crosshaircol,@crosshairtac
	jne mlp2
	clr @crosshairspc		* col target reached
mlp2
	li r13,43				* offsets for this map (row)
	li r14,16				* col
	mov @crosshairrow,r6
	srl r6,8
	mov @crosshaircol,r7
	srl r7,8
	bl @drawcrosshairs		* put it on the screen

* clear status line (can we afford to redraw status line every frame?)
	li r0,>1800+(23*32)
	clr r1
	li r2,32
	bl @vmbs

* draw status line
	mov @statusline,r1				* which row are we showing?
	mov @STATUSTEXT(r1),r1			* get the pointer
	jne mlp3
	
* display the song title
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song
	mov *r1,r1						* pointer to title data
	
mlp3
	mov *r1+,r2						* size in characters (r1 now points at actual text)
	li r0,32						* calculate a centered address (start with *2 for easier math)
	s r2,r0
	srl r0,1
	ai r0,>1800+(23*32)
	bl @showtext

* draw next text character
	dec @textdelay					* count down text delay (this may wrap around at the end, that's okay)
	jne mlp4						* not ready
	
	mov @textptr,r1					* get the byte pointer, if any
	jeq mlp4						* nope, there isn't one
	
	mov @textvdp,r0
	li r2,1
	bl @showtext
	li r1,>0a00
	movb r1,*r8						* draw the cursor
	
	inc @textptr
	inc @textvdp
	li r0,3
	mov r0,@textdelay
	dec @textcount
	jne mlp4
	
* we finished a row of text, so work out the next one
* clear the cursor first
	mov @textvdp,r0
	clr r1
	bl @vsbw

	inct @textline
	mov @textline,r1
	mov @TEXTFCTNS(r1),r1
	jeq mlp6
	b *r1

mlp6
* no more text - clear the pointer
	clr @textptr
	jmp mlp4
	
txtfctn1
	li r0,>5800+(6*32)+17
	li r1,txtstage
	jmp mlp5
	
txtfctn2
	li r0,>5800+(7*32)+19
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song
	mov @2(r1),r1
	jmp mlp5
	
txtfctn3
	li r0,>5800+(8*32)+17
	li r1,txttarget
	jmp mlp5
	
txtfctn4
	li r0,>5800+(9*32)+19
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song
	mov @4(r1),r1
	jmp mlp5
	
txtfctn5
	li r0,>5800+(10*32)+17
	li r1,txtduration
	jmp mlp5
	
txtfctn6
	li r0,>5800+(11*32)+19
	mov r5,r1						* song index
	mov @songinfo(r1),r1			* table for this song
	mov @6(r1),r1
	
mlp5
	mov r0,@textvdp
	mov *r1+,@textcount
	mov r1,@textptr

mlp4
* check for end of music (make sure we ALSO check that text is done drawing)
	movb @songNote+7,r0			* check if music is stopped
	andi r0,>0100
	jne mlp7
	
* check if there's a next song to play
	mov @nextsong,r15
	jeq mlp8

* there IS a next song	
	mov r15,*r15				* map it in
	li r1,>6000
	mov @nextsongidx,r2			* index
	swpb r2
	bl @startsong				* init it
	
	clr @nextsong				* and make sure we don't play it again
	jmp mlp7

mlp8
* music is over, but is the text?
	mov @textptr,r0
	jne mlp7

* all done, hit the next tune
	inct r5
	mov @SONGINFO(r5),r0
	jne mlp9
	li r5,2					* wrap around
mlp9
	bl @newmusic
	
mlp7
* check keys

	
	



	
	
	b @mainloop
	
	END
	